import psycopg2
import pandas as pd
import os
from dotenv import load_dotenv

print("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
env_path = '.env'
print(f"–ò—â–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {env_path}")

try:
    load_dotenv(env_path)
    print("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def load_from_parquet():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Parquet —Ñ–∞–π–ª–∞"""
    parquet_file = "–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥.parquet"
    
    if not os.path.exists(parquet_file):
        raise FileNotFoundError(f"Parquet —Ñ–∞–π–ª {parquet_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Parquet...")
    df = pd.read_parquet(parquet_file)
    print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
    return df

def normalize_column_name(col_name):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è PostgreSQL"""
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    normalized = (col_name.replace("/", "_per_")
                  .replace("(", "")
                  .replace(")", "")
                  .replace("<", "")
                  .replace(">", "")
                  .replace(" ", "_")
                  .replace("-", "_")
                  .replace(".", "_")
                  .replace("¬µ", "u")
                  .replace("%", "percent")
                  .lower())
    return normalized

def main():
    try:
        print("–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        host = os.getenv('DB_HOST')
        port = os.getenv('DB_PORT')
        database = os.getenv('DB_NAME')
        user = os.getenv('DB_USER')
        password = os.getenv('DB_PASSWORD')
        
        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"  –•–æ—Å—Ç: {host}")
        print(f"  –ü–æ—Ä—Ç: {port}")
        print(f"  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database}")
        print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
        print(f"  –ü–∞—Ä–æ–ª—å: {'*' * len(password) if password else '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        
        if not all([host, port, database, user, password]):
            raise Exception("–ù–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–∫–∞–∑–∞–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        
        credentials = {
            'host': host,
            'port': int(port),
            'database': database,
            'user': user,
            'password': password
        }
        
        print(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {credentials['host']}:{credentials['port']}")
        conn = psycopg2.connect(**credentials)
        cursor = conn.cursor()
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ü–û–î–ì–û–¢–û–í–õ–ï–ù–ù–û–ì–û Parquet —Ñ–∞–π–ª–∞
        df = load_from_parquet()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫
        df_100 = df.head(100)
        print(f"–ì–æ—Ç–æ–≤–∏–º –∫ –∑–∞–ø–∏—Å–∏: {len(df_100)} —Å—Ç—Ä–æ–∫, {len(df_100.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–º–∏–ª–∏–∏
        table_name = "ponomarets"
        print(f"–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É: {table_name}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        cursor.execute(f"DROP TABLE IF EXISTS {table_name}")
        print("–°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
        normalized_columns = [normalize_column_name(col) for col in df_100.columns]
        
        # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –î–û —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
        print("\nüìã –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –ö–û–õ–û–ù–û–ö (–æ—Ä–∏–≥–∏–Ω–∞–ª -> –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ):")
        print("=" * 80)
        for i, original_col in enumerate(df_100.columns):
            print(f"  {original_col:40} -> {normalized_columns[i]}")
        print("=" * 80)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        columns_sql = []
        for i, col in enumerate(df_100.columns):
            dtype = str(df_100[col].dtype)
            normalized_col = normalized_columns[i]
            
            if 'category' in dtype or 'object' in dtype:
                sql_type = 'TEXT'
            elif 'int' in dtype:
                sql_type = 'INTEGER'
            elif 'float' in dtype:
                sql_type = 'REAL'
            else:
                sql_type = 'TEXT'
                
            columns_sql.append(f'"{normalized_col}" {sql_type}')
        
        create_sql = f'CREATE TABLE {table_name} ({", ".join(columns_sql)})'
        cursor.execute(create_sql)
        print("–ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        columns_str = ', '.join([f'"{col}"' for col in normalized_columns])
        placeholders = ', '.join(['%s'] * len(normalized_columns))
        insert_sql = f"INSERT INTO {table_name} ({columns_str}) VALUES ({placeholders})"
        
        total_inserted = 0
        
        for index, row in df_100.iterrows():
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
                values = []
                for col in df_100.columns:
                    value = row[col]
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
                    if pd.isna(value):
                        values.append(None)
                    else:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã Python
                        if isinstance(value, (pd.Timestamp, pd.Timedelta)):
                            values.append(str(value))
                        else:
                            values.append(value)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                cursor.execute(insert_sql, values)
                total_inserted += 1
                
                if total_inserted % 20 == 0:
                    print(f"   –ó–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_inserted}/{len(df_100)}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index}: {e}")
                continue
        
        conn.commit()
        
        print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_inserted}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
        count = cursor.fetchone()[0]
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ —Ç–∞–±–ª–∏—Ü–µ {count} —Å—Ç—Ä–æ–∫")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PostgreSQL
        print(f"\nüèóÔ∏è  –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´ –í POSTGRESQL:")
        print("=" * 80)
        cursor.execute(f"""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = '{table_name}'
            ORDER BY ordinal_position
        """)
        
        columns_info = cursor.fetchall()
        print(f"{'–ö–æ–ª–æ–Ω–∫–∞ –≤ –ë–î':30} {'–¢–∏–ø':15} {'NULLable':10}")
        print("-" * 80)
        for col_info in columns_info:
            print(f"{col_info[0]:30} {col_info[1]:15} {col_info[2]:10}")
        print("=" * 80)
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        print(f"\nüìä –ü–†–ò–ú–ï–† –î–ê–ù–ù–´–• –ò–ó –¢–ê–ë–õ–ò–¶–´ (–ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏):")
        print("=" * 80)
        cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
        sample_data = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        cursor.execute(f"SELECT * FROM {table_name} LIMIT 0")
        col_names = [desc[0] for desc in cursor.description]
        
        # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–æ–ª–æ–Ω–æ–∫
        header = " | ".join([f"{name:15}" for name in col_names])
        print(header)
        print("-" * len(header))
        
        # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ
        for row in sample_data:
            row_str = " | ".join([f"{str(val):15}" for val in row])
            print(row_str)
        print("=" * 80)
        
        cursor.close()
        conn.close()
        
        print("\n‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    main()
    print("–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
