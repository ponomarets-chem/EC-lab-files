import os
import hashlib
import pandas as pd
import gdown

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –≤ Google Drive
FILE_ID = "1YF8duBM5HERkyCPAUPlzrs9mirZInNkT"
url = f"https://drive.google.com/uc?id={FILE_ID}"

# –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
local_csv = "–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥.csv"
out_parquet = "–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥.parquet"

# –≠—Ç–∞–ª–æ–Ω–Ω—ã–π SHA256-—Ö—ç—à
EXPECTED_HASH = "d380426c075b294b3a5808b987a352c53e8b3ff3ae99e6bec50423a710166c1f"

# –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
TYPE_MAP = {
    "id": "category",
    "mode": "Int64",
    "0": "Int64",
    "error": "Int64",
    "control changes": "Int64",
    "Ns changes": "Int64",
    "counter inc.": "Int64",
    "Ns": "Int64",
    "time/s": "float",
    "control/V": "float",
    "Ewe/V": "float",
    "<I>/mA": "float",
    "dQ/C": "float",
    "(Q-Qo)/C": "float",
    "I Range": "Int64",
    "Q charge/discharge/mA.h": "float",
    "half cycle": "Int64",
    "Energy charge/W.h": "float",
    "Energy discharge/W.h": "float",
    "Capacitance charge/¬µF": "float",
    "Capacitance discharge/¬µF": "float",
    "Q discharge/mA.h": "float",
    "Q charge/mA.h": "float",
    "Capacity/mA.h": "float",
    "Efficiency/%": "float",
    "cycle number": "float",
    "P/W": "float"
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def compute_file_hash(path: str, algorithm: str = "sha256") -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SHA-256)."""
    hash_func = hashlib.new(algorithm)
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            hash_func.update(chunk)
    return hash_func.hexdigest()


def download_if_needed():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ —Ö—ç—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç."""
    need_download = False

    if os.path.exists(local_csv):
        print("–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à‚Ä¶")
        local_hash = compute_file_hash(local_csv)
        print(f"–¢–µ–∫—É—â–∏–π SHA256: {local_hash}")

        if EXPECTED_HASH != "d380426c075b294b3a5808b987a352c53e8b3ff3ae99e6bec50423a710166c1f" and local_hash.lower() != EXPECTED_HASH.lower():
            print("‚ö†Ô∏è –•—ç—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º! –ü–µ—Ä–µ–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª.")
            need_download = True
        else:
            print("‚úÖ –•—ç—à —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
    else:
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.")
        need_download = True

    if need_download:
        if os.path.exists(local_csv):
            try:
                os.remove(local_csv)
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª:", e)

        gdown.download(url, local_csv, quiet=False)

        if not os.path.exists(local_csv):
            raise RuntimeError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")

        new_hash = compute_file_hash(local_csv)
        print(f"–•—ç—à —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {new_hash}")

        if EXPECTED_HASH != "REPLACE_WITH_REAL_HASH" and new_hash.lower() != EXPECTED_HASH.lower():
            raise RuntimeError("‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ —Ö—ç—à—É! –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è.")

def load_and_cast():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CSV –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫."""
    print("–ß–∏—Ç–∞–µ–º CSV —Å 62-–π —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫...")
    df = pd.read_csv(
        local_csv,
        sep=";",
        header=61,
        encoding="cp1251",
        low_memory=False
    )

    print("üßÆ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–∑–∞–ø—è—Ç—ã–µ ‚Üí —Ç–æ—á–∫–∏, e-—Ñ–æ—Ä–º–∞—Ç)...")
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞: –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç '1,23e-4' ‚Üí '1.23e-4'
    df = df.applymap(lambda x: str(x).replace(",", ".") if isinstance(x, str) else x)

    print("–ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ TYPE_MAP‚Ä¶")
    missing = []
    for col, dtype in TYPE_MAP.items():
        if col in df.columns:
            if "Int" in dtype or "float" in dtype:
                df[col] = pd.to_numeric(df[col], errors="coerce")
            else:
                df[col] = df[col].astype(dtype)
        else:
            missing.append(col)

    if missing:
        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {missing}")

    print("\n–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã:")
    print(df.head(10))

    return df

def save_parquet(df):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ Parquet."""
    print("–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Parquet:", out_parquet)
    df.to_parquet(out_parquet, engine="pyarrow", compression="snappy", index=False)
    print("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", out_parquet)


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===

def main():
    download_if_needed()
    df = load_and_cast()

    print("\n–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:")
    print(df.head(10))

    print("\n–°—Ç—Ä–æ–∫–∏ 62‚Äì72:")
    print(df.iloc[61:72])

    print("\n–¢–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫:")
    print(df.dtypes)

    save_parquet(df)


if __name__ == "__main__":
    main()
