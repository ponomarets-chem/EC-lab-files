import os
import hashlib
import pandas as pd
import gdown

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –≤ Google Drive
FILE_ID = "1YF8duBM5HERkyCPAUPlzrs9mirZInNkT"
url = f"https://drive.google.com/uc?id={FILE_ID}"

# –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
local_csv = "–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥.csv"
out_parquet = "–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥.parquet"

# –≠—Ç–∞–ª–æ–Ω–Ω—ã–π SHA256-—Ö—ç—à
EXPECTED_HASH = "d380426c075b294b3a5808b987a352c53e8b3ff3ae99e6bec50423a710166c1f"

# –°–ª–æ–≤–∞—Ä—å —Ç–∏–ø–æ–≤ –∫–æ–ª–æ–Ω–æ–∫ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
TYPE_MAP = {
    "id": "category",
    "mode": "Int64",
    "ox/red": "category",
    "error": "Int64",
    "control changes": "Int64",
    "Ns changes": "Int64",
    "counter inc.": "Int64",
    "Ns": "Int64",
    "time/s": "float64",
    "control/V": "float64",
    "Ewe/V": "float64",
    "<I>/mA": "float64",
    "dQ/C": "float64",
    "(Q-Qo)/C": "float64",
    "I Range": "Int64",
    "Q charge/discharge/mA.h": "float64",
    "half cycle": "Int64",
    "Energy charge/W.h": "float64",
    "Energy discharge/W.h": "float64",
    "Capacitance charge/¬µF": "float64",
    "Capacitance discharge/¬µF": "float64",
    "Q discharge/mA.h": "float64",
    "Q charge/mA.h": "float64",
    "Capacity/mA.h": "float64",
    "Efficiency/%": "float64",
    "cycle number": "float64",
    "P/W": "float64"
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def compute_file_hash(path: str, algorithm: str = "sha256") -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é SHA-256)."""
    hash_func = hashlib.new(algorithm)
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(8192), b""):
            hash_func.update(chunk)
    return hash_func.hexdigest()


def download_if_needed():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ —Ö—ç—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç."""
    need_download = False

    if os.path.exists(local_csv):
        print("–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—ç—à‚Ä¶")
        local_hash = compute_file_hash(local_csv)
        print(f"–¢–µ–∫—É—â–∏–π SHA256: {local_hash}")

        if EXPECTED_HASH != "d380426c075b294b3a5808b987a352c53e8b3ff3ae99e6bec50423a710166c1f" and local_hash.lower() != EXPECTED_HASH.lower():
            print("‚ö†Ô∏è –•—ç—à –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º! –ü–µ—Ä–µ–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª.")
            need_download = True
        else:
            print("‚úÖ –•—ç—à —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
    else:
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.")
        need_download = True

    if need_download:
        if os.path.exists(local_csv):
            try:
                os.remove(local_csv)
            except Exception as e:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª:", e)

        gdown.download(url, local_csv, quiet=False)

        if not os.path.exists(local_csv):
            raise RuntimeError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.")

        new_hash = compute_file_hash(local_csv)
        print(f"–•—ç—à —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {new_hash}")

        if EXPECTED_HASH != "REPLACE_WITH_REAL_HASH" and new_hash.lower() != EXPECTED_HASH.lower():
            raise RuntimeError("‚ùå –°–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ø–æ —Ö—ç—à—É! –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è.")

import re

def load_and_cast():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CSV –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç —Ç–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫, –æ—á–∏—â–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏."""
    print("–ß–∏—Ç–∞–µ–º CSV —Å 62-–π —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫...")
    df = pd.read_csv(
        local_csv,
        sep=";",
        header=61,
        encoding="cp1251",
        low_memory=False
    )

    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ–ª–æ–Ω–æ–∫
    df.columns = [col.replace("ÔøΩ", "¬µ").strip() for col in df.columns]

    # –£–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã–µ –∏–ª–∏ 'Unnamed' –∫–æ–ª–æ–Ω–∫–∏
    df = df.loc[:, ~df.columns.str.contains("^Unnamed")]

    print("üßÆ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–ø—è—Ç—ã–µ ‚Üí —Ç–æ—á–∫–∏, e-—Ñ–æ—Ä–º–∞—Ç)...")

    # –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —á–∏—Å–ª–æ–≤—ã—Ö —è—á–µ–µ–∫
    def normalize_cell(x):
        if isinstance(x, str):
            s = x.strip().replace(",", ".").replace("‚àí", "-").replace(" ", "")
            if re.fullmatch(r"[-+]?\d*\.?\d*(e[-+]?\d+)?", s, flags=re.IGNORECASE):
                try:
                    return float(s)
                except ValueError:
                    return pd.NA
            return x  # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏
        return x

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –ø–æ TYPE_MAP - –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ü–û–°–û–ë
    for col, dtype in TYPE_MAP.items():
        if col in df.columns:
            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫—É: {col} -> {dtype}")
            
            if dtype == "category":
                df[col] = df[col].astype("category")
                
            elif dtype == "Int64":
                # –°–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º, –∑–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ü–µ–ª—ã–µ
                df[col] = df[col].map(normalize_cell)
                df[col] = pd.to_numeric(df[col], errors="coerce")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ü–µ–ª—ã–µ
                temp_series = df[col].dropna()
                if len(temp_series) > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–ª—ã–µ
                    if (temp_series == temp_series.astype(int)).all():
                        df[col] = df[col].astype("Int64")
                    else:
                        print(f"  ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ {col} —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ float")
                        df[col] = df[col].astype("float64")
                else:
                    df[col] = df[col].astype("Int64")
                    
            elif dtype == "float64":
                df[col] = df[col].map(normalize_cell)
                df[col] = pd.to_numeric(df[col], errors="coerce").astype("float64")

    # –ü–µ—á–∞—Ç—å –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("\n–ü–µ—Ä–≤—ã–µ 10 ID:")
    if "id" in df.columns:
        print(df["id"].head(10))
    else:
        print("‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ 'id' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    print("\n–¢–∏–ø—ã –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(df.dtypes)

    return df


def save_parquet(df):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ Parquet."""
    print("–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Parquet:", out_parquet)
    df.to_parquet(out_parquet, engine="pyarrow", compression="snappy", index=False)
    print("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", out_parquet)


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===

def main():
    download_if_needed()
    df = load_and_cast()

    print("\n–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
    print(df.head(5))

    print("\n–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:")
    print(list(df.columns))

    print("\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:")
    print(df.info())

    save_parquet(df)


if __name__ == "__main__":
    main()
