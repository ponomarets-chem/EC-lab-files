import argparse
import sys
import os

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ETL –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("üöÄ ETL –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–ø—É—â–µ–Ω!")
    
    parser = argparse.ArgumentParser(description='ETL –ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ—Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö')
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç - –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    parser.add_argument(
        'source', 
        type=str, 
        help='–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º (—Ñ–∞–π–ª –∏–ª–∏ URL Google Drive)'
    )
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        '--table-name', 
        type=str, 
        default='ponomarets',
        help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ponomarets)'
    )
    
    parser.add_argument(
        '--max-rows', 
        type=int, 
        default=100,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)'
    )
    
    args = parser.parse_args()
    
    print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {args.source}")
    print(f"üóÑÔ∏è –¢–∞–±–ª–∏—Ü–∞: {args.table_name}") 
    print(f"üî¢ –ú–∞–∫—Å —Å—Ç—Ä–æ–∫: {args.max_rows}")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏
        print("\nüì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏...")
        from etl.extract import extract_data
        from etl.transform import transform_data
        from etl.load import load_to_database
        
        print("‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –®–∞–≥ 1: Extract
        print("\nüì• –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        raw_data_path = extract_data(args.source)
        
        if not raw_data_path:
            print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return 1
        
        # –®–∞–≥ 2: Transform  
        print("\nüîÑ –®–∞–≥ 2: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        csv_path, parquet_path = transform_data(raw_data_path)
        
        # –®–∞–≥ 3: Load
        print("\nüì§ –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...")
        success = load_to_database(
            csv_path, 
            table_name=args.table_name,
            max_rows=args.max_rows
        )
        
        if success:
            print("\nüéâ ETL –ø–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return 0
        else:
            print("\nüí• ETL –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–≥—Ä—É–∑–∫–∏")
            return 1
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())
    
