#!/usr/bin/env python3
"""
üéØ –°–ö–†–ò–ü–¢ –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò ETL –ü–ê–ô–ü–õ–ê–ô–ù–ê
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å ETL
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))


import time
from datetime import datetime

class ETLRunner:
    def __init__(self):
        self.start_time = None
        self.source_url = "https://drive.google.com/uc?id=1YF8duBM5HERkyCPAUPlzrs9mirZInNkT"
        
    def print_header(self):
        """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print("\n" + "="*60)
        print("üéØ –ê–ö–¢–ò–í–ê–¶–ò–Ø ETL –ü–ê–ô–ü–õ–ê–ô–ù–ê")
        print("="*60)
        print(f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
        print("="*60)
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô...")
        
        dependencies = {
            'pandas': 'pandas',
            'gdown': 'gdown', 
            'psycopg2': 'psycopg2-binary',
            'dotenv': 'python-dotenv',
            'pyarrow': 'pyarrow'
        }
        
        missing_deps = []
        for package, install_name in dependencies.items():
            try:
                __import__(package)
                print(f"   ‚úÖ {package}")
            except ImportError:
                print(f"   ‚ùå {package}")
                missing_deps.append(install_name)
        
        if missing_deps:
            print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
            print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_deps))
            return False
        return True
    
    def check_etl_modules(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª–µ–π ETL"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ú–û–î–£–õ–ï–ô ETL...")
        
        modules = ['extract', 'transform', 'load', 'validate']
        all_ok = True
        
        for module in modules:
            try:
                __import__(f'etl.{module}')
                print(f"   ‚úÖ etl.{module}")
            except Exception as e:
                print(f"   ‚ùå etl.{module}: {e}")
                all_ok = False
        
        return all_ok
    
    def run_etl(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π ETL –ø—Ä–æ—Ü–µ—Å—Å"""
        print("\nüöÄ –ó–ê–ü–£–°–ö ETL –ü–†–û–¶–ï–°–°–ê...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ ETL
            from etl.extract import extract_data
            from etl.transform import transform_data
            from etl.load import load_to_database
            
            # –®–ê–ì 1: EXTRACT
            print("\nüì• –≠–¢–ê–ü 1: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–•")
            print("   üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Google Drive...")
            raw_data_path = extract_data(self.source_url)
            
            if not raw_data_path:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!")
                return False
            print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {raw_data_path}")
            
            # –®–ê–ì 2: TRANSFORM
            print("\nüîÑ –≠–¢–ê–ü 2: –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–Ø –î–ê–ù–ù–´–•")
            print("   üõ†Ô∏è  –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏ –æ—á–∏—Å—Ç–∫–∞...")
            csv_path, parquet_path = transform_data(raw_data_path)
            print(f"   ‚úÖ CSV —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {csv_path}")
            print(f"   ‚úÖ Parquet —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {parquet_path}")
            
            # –®–ê–ì 3: LOAD
            print("\nüì§ –≠–¢–ê–ü 3: –ó–ê–ì–†–£–ó–ö–ê –í –ë–ê–ó–£ –î–ê–ù–ù–´–•")
            print("   üóÑÔ∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
            success = load_to_database(
                csv_path, 
                table_name="ponomarets",
                max_rows=100
            )
            
            if success:
                print("   ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ë–î!")
                return True
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ –ë–î!")
                return False
                
        except Exception as e:
            print(f"   üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def check_results(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í...")
        
        results = {
            'data/raw/': '–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ',
            'data/processed/processed_data.csv': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ CSV',
            'data/processed/processed_data.parquet': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ Parquet'
        }
        
        all_exists = True
        for path, description in results.items():
            if os.path.exists(path):
                if os.path.isdir(path):
                    files = os.listdir(path)
                    print(f"   ‚úÖ {description}: {len(files)} —Ñ–∞–π–ª–æ–≤")
                else:
                    size = os.path.getsize(path)
                    print(f"   ‚úÖ {description}: {size} –±–∞–π—Ç")
            else:
                print(f"   ‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                all_exists = False
        
        return all_exists
    
    def print_summary(self, success, elapsed_time):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "="*60)
        if success:
            print("üéâ ETL –ü–ê–ô–ü–õ–ê–ô–ù –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        else:
            print("üí• ETL –ü–ê–ô–ü–õ–ê–ô–ù –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò")
        
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        print("="*60)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        self.start_time = time.time()
        self.print_header()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.check_dependencies():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏ ETL
        if not self.check_etl_modules():
            print("\n‚ö†Ô∏è  –ù–µ –≤—Å–µ –º–æ–¥—É–ª–∏ ETL –¥–æ—Å—Ç—É–ø–Ω—ã!")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º ETL
        success = self.run_etl()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if success:
            self.check_results()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        elapsed_time = time.time() - self.start_time
        self.print_summary(success, elapsed_time)
        
        return success

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    runner = ETLRunner()
    
    try:
        success = runner.run()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()